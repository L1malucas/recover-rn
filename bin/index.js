#!/usr/bin/env node
/**
 * üîß Interactive React Native APK Recovery CLI
 * Autor: Lucas Lima (vers√£o interativa melhorada)
 */

import fs from "fs";
import path from "path";
import { execSync } from "child_process";
import chalk from "chalk";
import inquirer from "inquirer";

class InteractiveAPKRecovery {
  constructor() {
    this.apkFile = null;
    this.apkBaseName = null;
    this.logFile = null;
    this.selectedOptions = [];
  }

  async init() {
    this.showWelcome();
    await this.selectAPK();
    await this.showMenu();
  }

  showWelcome() {
    console.clear();
    console.log(chalk.cyan.bold("‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó"));
    console.log(chalk.cyan.bold("‚ïë        üöÄ React Native APK Recovery CLI      ‚ïë"));
    console.log(chalk.cyan.bold("‚ïë                 Vers√£o 3.0                   ‚ïë"));
    console.log(chalk.cyan.bold("‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù"));
    console.log("");
    console.log(chalk.white("üì± Recupere c√≥digo fonte de APKs React Native"));
    console.log(chalk.white("üîß M√∫ltiplas ferramentas e m√©todos dispon√≠veis"));
    console.log(chalk.white("üìä An√°lise completa e relat√≥rios detalhados"));
    console.log("");
  }

  async selectAPK() {
    const { apkPath } = await inquirer.prompt([
      {
        type: 'input',
        name: 'apkPath',
        message: 'üìÇ Digite o caminho para o arquivo APK:',
        validate: (input) => {
          if (!input.trim()) {
            return 'Por favor, digite um caminho v√°lido';
          }
          
          if (!fs.existsSync(input)) {
            return `‚ùå Arquivo n√£o encontrado: ${input}`;
          }
          
          if (!input.toLowerCase().endsWith('.apk')) {
            return '‚ùå O arquivo deve ter extens√£o .apk';
          }
          
          return true;
        }
      }
    ]);

    this.apkFile = apkPath;
    this.apkBaseName = path.basename(apkPath, '.apk');
    this.logFile = `${this.apkBaseName}-recovery.log`;

    console.log("");
    console.log(chalk.green(`‚úÖ APK v√°lido encontrado: ${chalk.bold(this.apkBaseName)}.apk`));
    
    // Verificar se √© um APK v√°lido (b√°sico)
    await this.validateAPK();
  }

  async validateAPK() {
    console.log(chalk.blue("üîç Validando estrutura do APK..."));
    
    try {
      // Tentar listar conte√∫do b√°sico do APK
      const result = execSync(`unzip -l "${this.apkFile}" | head -10`, { 
        encoding: 'utf8',
        stdio: 'pipe' 
      });
      
      if (result.includes('AndroidManifest.xml')) {
        console.log(chalk.green("‚úÖ APK v√°lido - AndroidManifest.xml encontrado"));
      } else {
        console.log(chalk.yellow("‚ö†Ô∏è  APK pode n√£o ser v√°lido - AndroidManifest.xml n√£o encontrado"));
      }
      
      // Verificar se tem assets JS
      const hasJS = execSync(`unzip -l "${this.apkFile}" | grep -E "\\.(bundle|js)$" | head -3`, { 
        encoding: 'utf8',
        stdio: 'pipe' 
      });
      
      if (hasJS.trim()) {
        console.log(chalk.green("‚úÖ Poss√≠veis bundles JavaScript detectados"));
      } else {
        console.log(chalk.yellow("‚ö†Ô∏è  Nenhum bundle JavaScript √≥bvio encontrado"));
      }
      
    } catch (error) {
      console.log(chalk.yellow("‚ö†Ô∏è  N√£o foi poss√≠vel validar completamente o APK"));
      this.logError("Erro na valida√ß√£o do APK", error);
    }
    
    console.log("");
  }

  async showMenu() {
    const choices = [
      {
        name: 'üöÄ An√°lise Completa (Recomendado)',
        value: 'full',
        description: 'Executa todas as ferramentas dispon√≠veis'
      },
      {
        name: 'üì¶ Extra√ß√£o B√°sica (Unzip)',
        value: 'unzip',
        description: 'Extra√ß√£o r√°pida usando unzip'
      },
      {
        name: 'üîß Descompila√ß√£o Avan√ßada (APKTool)',
        value: 'apktool',
        description: 'Descompila√ß√£o completa com APKTool'
      },
      {
        name: '‚ú® Beautify JavaScript',
        value: 'beautify',
        description: 'Formatar e embelezar c√≥digo JS'
      },
      {
        name: 'üìä An√°lise de Bundle',
        value: 'analyze',
        description: 'An√°lise detalhada do bundle React Native'
      },
      {
        name: 'üñºÔ∏è Extrair Assets',
        value: 'assets',
        description: 'Copiar imagens, √≠cones e recursos'
      },
      {
        name: 'üìã Bundle Visualizer',
        value: 'visualizer',
        description: 'Usar react-native-bundle-visualizer'
      },
      {
        name: 'üéØ Sele√ß√£o Personalizada',
        value: 'custom',
        description: 'Escolher m√∫ltiplas op√ß√µes'
      }
    ];

    console.log(chalk.cyan.bold("üéØ Escolha uma op√ß√£o de recupera√ß√£o:\n"));

    const { selectedAction } = await inquirer.prompt([
      {
        type: 'list',
        name: 'selectedAction',
        message: 'Selecione uma op√ß√£o:',
        choices: choices,
        pageSize: 10
      }
    ]);

    if (selectedAction === 'custom') {
      await this.customSelection();
    } else if (selectedAction === 'full') {
      this.selectedOptions = ['unzip', 'apktool', 'beautify', 'analyze', 'assets'];
    } else {
      this.selectedOptions = [selectedAction];
    }

    await this.executeRecovery();
  }

  async customSelection() {
    const { customOptions } = await inquirer.prompt([
      {
        type: 'checkbox',
        name: 'customOptions',
        message: 'Selecione as op√ß√µes desejadas:',
        choices: [
          { name: 'üì¶ Extra√ß√£o Unzip', value: 'unzip' },
          { name: 'üîß APKTool', value: 'apktool' },
          { name: '‚ú® Beautify JS', value: 'beautify' },
          { name: 'üìä An√°lise Bundle', value: 'analyze' },
          { name: 'üñºÔ∏è Assets', value: 'assets' },
          { name: 'üìã Bundle Visualizer', value: 'visualizer' }
        ],
        validate: (answer) => {
          if (answer.length === 0) {
            return 'Selecione pelo menos uma op√ß√£o';
          }
          return true;
        }
      }
    ]);

    this.selectedOptions = customOptions;
  }

  async executeRecovery() {
    console.log("");
    console.log(chalk.blue.bold("üöÄ Iniciando processo de recupera√ß√£o...\n"));
    console.log(chalk.gray(`üìù Logs ser√£o salvos em: ${this.logFile}\n`));

    // Verificar depend√™ncias
    if (!this.checkDependencies()) {
      console.log(chalk.red("‚ùå Instale as depend√™ncias necess√°rias antes de continuar."));
      process.exit(1);
    }

    let outputDir = null;
    let bundlePath = null;

    // Executar op√ß√µes selecionadas
    for (const option of this.selectedOptions) {
      switch (option) {
        case 'unzip':
          outputDir = await this.executeUnzip();
          break;
        case 'apktool':
          outputDir = await this.executeAPKTool();
          break;
        case 'beautify':
          if (!bundlePath) bundlePath = this.findJSBundle(outputDir);
          await this.executeBeautify(bundlePath, outputDir);
          break;
        case 'analyze':
          if (!bundlePath) bundlePath = this.findJSBundle(outputDir);
          await this.executeAnalysis(bundlePath, outputDir);
          break;
        case 'assets':
          if (!outputDir) outputDir = await this.executeUnzip();
          await this.executeAssets(outputDir);
          break;
        case 'visualizer':
          if (!bundlePath) bundlePath = this.findJSBundle(outputDir);
          await this.executeVisualizer(bundlePath);
          break;
      }
    }

    // Gerar relat√≥rio final
    if (outputDir) {
      this.generateFinalReport(outputDir);
    }

    this.showCompletionSummary(outputDir);
  }

  checkDependencies() {
    const deps = [
      { cmd: "unzip -v", name: "unzip" },
      { cmd: "npx --version", name: "npm/npx" }
    ];

    if (this.selectedOptions.includes('apktool')) {
      deps.push({ cmd: "apktool --version", name: "apktool" });
    }

    console.log(chalk.cyan("üîç Verificando depend√™ncias...\n"));
    
    for (const dep of deps) {
      try {
        execSync(dep.cmd, { stdio: 'pipe' });
        console.log(chalk.green(`‚úÖ ${dep.name}`));
      } catch {
        console.log(chalk.red(`‚ùå ${dep.name} - FALTANDO`));
        return false;
      }
    }
    console.log("");
    return true;
  }

  async executeUnzip() {
    const outputDir = `${this.apkBaseName}-unzip`;
    console.log(chalk.blue(`üì¶ Executando extra√ß√£o unzip em: ${outputDir}/`));
    
    this.runCommand(`rm -rf "${outputDir}" && mkdir -p "${outputDir}"`);
    
    const success = this.runCommand(
      `unzip -q "${this.apkFile}" -d "${outputDir}"`,
      "Erro na extra√ß√£o unzip"
    );

    if (success) {
      console.log(chalk.green(`‚úÖ Extra√ß√£o unzip conclu√≠da: ${outputDir}/\n`));
    }
    
    return outputDir;
  }

  async executeAPKTool() {
    const outputDir = `${this.apkBaseName}-apktool`;
    console.log(chalk.blue(`üîß Executando APKTool em: ${outputDir}/`));
    
    const success = this.runCommand(
      `apktool d "${this.apkFile}" -o "${outputDir}" -f`,
      "Erro no APKTool"
    );

    if (success) {
      console.log(chalk.green(`‚úÖ APKTool conclu√≠do: ${outputDir}/\n`));
    }
    
    return outputDir;
  }

  findJSBundle(outputDir) {
    if (!outputDir) return null;

    const possiblePaths = [
      path.join(outputDir, "assets", "index.android.bundle"),
      path.join(outputDir, "assets", "index.bundle"),
      path.join(outputDir, "assets", "main.jsbundle"),
      path.join(outputDir, "assets", "bundle.js")
    ];

    for (const bundlePath of possiblePaths) {
      if (fs.existsSync(bundlePath)) {
        console.log(chalk.green(`üéØ Bundle encontrado: ${path.basename(bundlePath)}`));
        return bundlePath;
      }
    }

    // Busca recursiva
    try {
      const result = execSync(
        `find "${outputDir}" -name "*.bundle" -o -name "*.js" | grep -E "(bundle|index)" | head -1`,
        { encoding: 'utf8', stdio: 'pipe' }
      );
      
      if (result.trim()) {
        console.log(chalk.green(`üéØ Bundle encontrado via busca: ${path.basename(result.trim())}`));
        return result.trim();
      }
    } catch {}

    console.log(chalk.yellow("‚ö†Ô∏è  Bundle JavaScript n√£o encontrado"));
    return null;
  }

  async executeBeautify(bundlePath, outputDir) {
    if (!bundlePath) {
      console.log(chalk.yellow("‚ö†Ô∏è  Pulando beautify - bundle n√£o encontrado\n"));
      return;
    }

    const beautifyDir = `${this.apkBaseName}-beautified`;
    const outputFile = path.join(beautifyDir, "index.pretty.js");
    
    console.log(chalk.blue(`‚ú® Executando beautify em: ${beautifyDir}/`));
    
    this.runCommand(`mkdir -p "${beautifyDir}"`);
    
    const success = this.runCommand(
      `npx js-beautify "${bundlePath}" -o "${outputFile}"`,
      "Erro no beautify"
    );

    if (success) {
      console.log(chalk.green(`‚úÖ Beautify conclu√≠do: ${outputFile}\n`));
    }
  }

  async executeAnalysis(bundlePath, outputDir) {
    if (!bundlePath) {
      console.log(chalk.yellow("‚ö†Ô∏è  Pulando an√°lise - bundle n√£o encontrado\n"));
      return;
    }

    const analysisDir = `${this.apkBaseName}-analysis`;
    console.log(chalk.blue(`üìä Executando an√°lise em: ${analysisDir}/`));
    
    this.runCommand(`mkdir -p "${analysisDir}"`);

    try {
      const stats = fs.statSync(bundlePath);
      const content = fs.readFileSync(bundlePath, 'utf8');
      
      const analysis = this.generateBundleAnalysis(content, stats);
      const analysisFile = path.join(analysisDir, "bundle-analysis.md");
      
      fs.writeFileSync(analysisFile, analysis);
      console.log(chalk.green(`‚úÖ An√°lise conclu√≠da: ${analysisFile}\n`));
    } catch (error) {
      this.logError("Erro na an√°lise do bundle", error);
    }
  }

  async executeAssets(outputDir) {
    const assetsDir = `${this.apkBaseName}-assets`;
    console.log(chalk.blue(`üñºÔ∏è  Executando extra√ß√£o de assets em: ${assetsDir}/`));
    
    this.runCommand(`mkdir -p "${assetsDir}"`);

    const folders = ["assets", "res", "drawable", "mipmap", "raw"];
    let copiedCount = 0;

    folders.forEach((folder) => {
      const src = path.join(outputDir, folder);
      if (fs.existsSync(src)) {
        this.runCommand(`cp -r "${src}" "${assetsDir}/"`, "", true);
        copiedCount++;
      }
    });

    console.log(chalk.green(`‚úÖ ${copiedCount} tipos de assets copiados: ${assetsDir}/\n`));
  }

  async executeVisualizer(bundlePath) {
    if (!bundlePath) {
      console.log(chalk.yellow("‚ö†Ô∏è  Pulando visualizer - bundle n√£o encontrado\n"));
      return;
    }

    console.log(chalk.blue("üìã Executando Bundle Visualizer..."));
    
    const success = this.runCommand(
      `npx react-native-bundle-visualizer "${bundlePath}"`,
      "Erro no Bundle Visualizer (pode n√£o estar instalado)",
      true
    );

    if (success) {
      console.log(chalk.green("‚úÖ Bundle Visualizer executado\n"));
    }
  }

  generateBundleAnalysis(content, stats) {
    const libraries = this.detectLibraries(content);
    const moduleCount = (content.match(/__d\(function\(g,r,i,a,m,e,d\)/g) || []).length;
    
    return `
# üìä An√°lise do Bundle - ${this.apkBaseName}

## üìà Estat√≠sticas Gerais
- **Tamanho**: ${(stats.size / 1024 / 1024).toFixed(2)} MB
- **Linhas**: ${content.split('\n').length.toLocaleString()}
- **Caracteres**: ${content.length.toLocaleString()}
- **M√≥dulos detectados**: ${moduleCount}

## üìö Bibliotecas Identificadas
${libraries.map(lib => `- ${lib}`).join('\n')}

## üîç Pr√≥ximos Passos
1. Examine o c√≥digo beautificado
2. Identifique componentes principais
3. Recrie estrutura do projeto
4. Reinstale depend√™ncias identificadas
5. Reimplemente funcionalidades

---
*Gerado em: ${new Date().toLocaleString()}*
    `.trim();
  }

  detectLibraries(content) {
    const commonLibs = [
      'react-native', 'react', 'redux', 'axios', 'lodash', 
      'moment', 'expo', 'navigation', '@react-native-community',
      'react-native-vector-icons', 'react-native-paper',
      'react-native-gesture-handler', 'react-native-screens'
    ];
    
    return commonLibs.filter(lib => 
      content.includes(`"${lib}"`) || 
      content.includes(`'${lib}'`) || 
      content.includes(lib.replace(/-/g, ''))
    );
  }

  generateFinalReport(outputDir) {
    const reportDir = `${this.apkBaseName}-report`;
    const reportFile = path.join(reportDir, "recovery-report.md");
    
    this.runCommand(`mkdir -p "${reportDir}"`);

    const report = `
# üöÄ Relat√≥rio de Recupera√ß√£o - ${this.apkBaseName}

## üì± Arquivo Original
- **APK**: \`${this.apkBaseName}.apk\`
- **Data**: ${new Date().toLocaleString()}
- **Op√ß√µes executadas**: ${this.selectedOptions.join(', ')}

## üìÅ Diret√≥rios Gerados
${this.selectedOptions.map(opt => {
  switch(opt) {
    case 'unzip': return `- üì¶ **Extra√ß√£o Unzip**: \`${this.apkBaseName}-unzip/\``;
    case 'apktool': return `- üîß **APKTool**: \`${this.apkBaseName}-apktool/\``;
    case 'beautify': return `- ‚ú® **C√≥digo Formatado**: \`${this.apkBaseName}-beautified/\``;
    case 'analyze': return `- üìä **An√°lise**: \`${this.apkBaseName}-analysis/\``;
    case 'assets': return `- üñºÔ∏è **Assets**: \`${this.apkBaseName}-assets/\``;
    default: return `- ${opt}`;
  }
}).join('\n')}

## üõ†Ô∏è Recomenda√ß√µes
1. **Comece pelo c√≥digo beautificado** se dispon√≠vel
2. **Examine a an√°lise** para entender a estrutura
3. **Use os assets** extra√≠dos no novo projeto
4. **Recrie o projeto** usando \`npx react-native init\`

## üìù Logs
- Logs t√©cnicos: \`${this.logFile}\`

---
*Recupera√ß√£o realizada com sucesso! üéâ*
    `.trim();

    fs.writeFileSync(reportFile, report);
    console.log(chalk.blue(`üìã Relat√≥rio final gerado: ${reportFile}`));
  }

  showCompletionSummary(outputDir) {
    console.log("");
    console.log(chalk.green.bold("üéâ RECUPERA√á√ÉO CONCLU√çDA COM SUCESSO! üéâ\n"));
    
    console.log(chalk.cyan.bold("üìÅ Arquivos e diret√≥rios criados:"));
    
    // Listar todos os diret√≥rios criados
    const patterns = [
      `${this.apkBaseName}-unzip`,
      `${this.apkBaseName}-apktool`, 
      `${this.apkBaseName}-beautified`,
      `${this.apkBaseName}-analysis`,
      `${this.apkBaseName}-assets`,
      `${this.apkBaseName}-report`
    ];

    patterns.forEach(pattern => {
      if (fs.existsSync(pattern)) {
        console.log(chalk.green(`‚úÖ ${pattern}/`));
      }
    });

    console.log("");
    console.log(chalk.yellow.bold("üöÄ Pr√≥ximos passos:"));
    console.log(chalk.white("1. Examine o relat√≥rio em") + chalk.cyan(` ${this.apkBaseName}-report/`));
    console.log(chalk.white("2. Veja o c√≥digo formatado (se gerado)"));  
    console.log(chalk.white("3. Use os assets extra√≠dos"));
    console.log(chalk.white("4. Recrie seu projeto React Native"));
    
    console.log("");
    console.log(chalk.gray(`üìù Logs salvos em: ${this.logFile}`));
    console.log("");
  }

  runCommand(cmd, errorMsg = "", silent = false) {
    try {
      const result = execSync(cmd, { 
        stdio: silent ? "pipe" : "inherit",
        encoding: "utf8"
      });
      return result;
    } catch (err) {
      if (errorMsg) {
        this.logError(errorMsg, err);
      }
      return null;
    }
  }

  logError(message, error) {
    const fullMessage = `[${new Date().toISOString()}] ${message}\n${error?.stack || error}\n\n`;
    fs.appendFileSync(this.logFile, fullMessage);
    console.error(chalk.red(`‚ùå ${message}`));
  }
}

// Inicializar CLI
const recovery = new InteractiveAPKRecovery();
recovery.init().catch(error => {
  console.error(chalk.red("Erro cr√≠tico:"), error);
  process.exit(1);
});